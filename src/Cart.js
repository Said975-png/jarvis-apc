import React, { useState } from 'react';
import { useCart } from './CartContext';
import { useAuth } from './AuthContext';

const Cart = ({ isOpen, onClose }) => {
  const { cartItems, removeFromCart, updateQuantity, getCartTotal, createOrder, clearCart } = useCart();
  const { user, isAuthenticated } = useAuth();
  
  const [isCheckout, setIsCheckout] = useState(false);
  const [customerInfo, setCustomerInfo] = useState({
    fullName: user?.name || '',
    phone: '',
    email: user?.email || '',
    notes: ''
  });
  const [loading, setLoading] = useState(false);
  const [error, setError] = useState('');
  const [success, setSuccess] = useState(false);

  const formatPrice = (price) => {
    return price.toLocaleString('ru-RU');
  };

  const handleInputChange = (e) => {
    const { name, value } = e.target;
    setCustomerInfo(prev => ({
      ...prev,
      [name]: value
    }));
    setError('');
  };

  const handleQuantityChange = (itemId, newQuantity) => {
    if (newQuantity < 1) {
      removeFromCart(itemId);
    } else {
      updateQuantity(itemId, newQuantity);
    }
  };

  const validateForm = () => {
    if (!customerInfo.fullName.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –§–ò–û');
      return false;
    }
    if (!customerInfo.phone.trim()) {
      setError('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
      return false;
    }
    if (customerInfo.phone.length < 10) {
      setError('–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞');
      return false;
    }
    return true;
  };

  const handleCreateOrder = async () => {
    if (!validateForm()) return;

    setLoading(true);
    setError('');

    try {
      const order = await createOrder(customerInfo);
      setSuccess(true);
      
      // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É—Å–ø–µ—à–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ 3 —Å–µ–∫—É–Ω–¥—ã, –∑–∞—Ç–µ–º –∑–∞–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
      setTimeout(() => {
        setSuccess(false);
        setIsCheckout(false);
        setCustomerInfo({
          fullName: user?.name || '',
          phone: '',
          email: user?.email || '',
          notes: ''
        });
        onClose();
      }, 3000);
      
    } catch (error) {
      setError(error.message);
    } finally {
      setLoading(false);
    }
  };

  const handleClose = () => {
    setIsCheckout(false);
    setError('');
    setSuccess(false);
    onClose();
  };

  if (!isOpen) return null;

  if (success) {
    return (
      <div className="cart-overlay" onClick={handleClose}>
        <div className="cart-container success-state" onClick={(e) => e.stopPropagation()}>
          <div className="success-message">
            <div className="success-icon">‚úÖ</div>
            <h2>–ó–∞–∫–∞–∑ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!</h2>
            <p>–ú—ã —Å–≤—è–∂–µ–º—Å—è —Å –≤–∞–º–∏ –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞.</p>
            <p>–û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å —Å—Ç–∞—Ç—É—Å –∑–∞–∫–∞–∑–∞ –º–æ–∂–Ω–æ –≤ –ª–∏—á–Ω–æ–º –∫–∞–±–∏–Ω–µ—Ç–µ.</p>
          </div>
        </div>
      </div>
    );
  }

  return (
    <div className="cart-overlay" onClick={handleClose}>
      <div className="cart-container" onClick={(e) => e.stopPropagation()}>
        <div className="cart-header">
          <h2>{isCheckout ? '–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞' : '–ö–æ—Ä–∑–∏–Ω–∞'}</h2>
          <button className="cart-close" onClick={handleClose}>
            <svg viewBox="0 0 24 24" fill="none">
              <path d="M6 6l12 12M6 18L18 6" stroke="currentColor" strokeWidth="2" strokeLinecap="round"/>
            </svg>
          </button>
        </div>

        {!isCheckout ? (
          /* –≠–∫—Ä–∞–Ω –∫–æ—Ä–∑–∏–Ω—ã */
          <div className="cart-content">
            {cartItems.length === 0 ? (
              <div className="empty-cart">
                <div className="empty-cart-icon">üõí</div>
                <h3>–ö–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞</h3>
                <p>–î–æ–±–∞–≤—å—Ç–µ —Ç–æ–≤–∞—Ä—ã –≤ –∫–æ—Ä–∑–∏–Ω—É, —á—Ç–æ–±—ã –æ—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑</p>
                <button className="continue-shopping" onClick={handleClose}>
                  –ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≤—ã–±–æ—Ä
                </button>
              </div>
            ) : (
              <>
                <div className="cart-items">
                  {cartItems.map(item => (
                    <div key={item.id} className="cart-item">
                      <div className="item-info">
                        <h4>{item.name}</h4>
                        <div className="item-type">{item.planType.toUpperCase()} –ø–ª–∞–Ω</div>
                        <div className="item-price">{formatPrice(item.price)} {item.price >= 1000000 ? '—Å—É–º' : '‚ÇΩ'}</div>
                      </div>
                      
                      <div className="item-actions">
                        <div className="quantity-controls">
                          <button 
                            onClick={() => handleQuantityChange(item.id, item.quantity - 1)}
                            className="quantity-btn"
                          >
                            -
                          </button>
                          <span className="quantity">{item.quantity}</span>
                          <button 
                            onClick={() => handleQuantityChange(item.id, item.quantity + 1)}
                            className="quantity-btn"
                          >
                            +
                          </button>
                        </div>
                        
                        <button 
                          onClick={() => removeFromCart(item.id)}
                          className="remove-btn"
                          title="–£–¥–∞–ª–∏—Ç—å"
                        >
                          <svg viewBox="0 0 24 24" fill="none">
                            <path d="M3 6h18M19 6l-1 14H6L5 6M10 11v6M14 11v6" stroke="currentColor" strokeWidth="2"/>
                          </svg>
                        </button>
                      </div>
                    </div>
                  ))}
                </div>

                <div className="cart-summary">
                  <div className="total-row">
                    <span>–ò—Ç–æ–≥–æ:</span>
                    <span className="total-amount">{formatPrice(getCartTotal())} —Å—É–º</span>
                  </div>
                  
                  <div className="cart-actions">
                    <button className="clear-cart" onClick={clearCart}>
                      –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É
                    </button>
                    <button 
                      className="checkout-btn"
                      onClick={() => setIsCheckout(true)}
                    >
                      –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑
                    </button>
                  </div>
                </div>
              </>
            )}
          </div>
        ) : (
          /* –≠–∫—Ä–∞–Ω –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞ */
          <div className="checkout-content">
            <div className="order-summary">
              <h3>–í–∞—à –∑–∞–∫–∞–∑</h3>
              <div className="order-items">
                {cartItems.map(item => (
                  <div key={item.id} className="order-item">
                    <span>{item.name} x{item.quantity}</span>
                    <span>{formatPrice(item.price * item.quantity)} —Å—É–º</span>
                  </div>
                ))}
              </div>
              <div className="order-total">
                <strong>–ò—Ç–æ–≥–æ: {formatPrice(getCartTotal())} —Å—É–º</strong>
              </div>
            </div>

            <div className="customer-form">
              <h3>–ö–æ–Ω—Ç–∞–∫—Ç–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è</h3>
              
              <div className="form-group">
                <label htmlFor="fullName">–§–ò–û *</label>
                <input
                  type="text"
                  id="fullName"
                  name="fullName"
                  value={customerInfo.fullName}
                  onChange={handleInputChange}
                  placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –ø–æ–ª–Ω–æ–µ –§–ò–û"
                  disabled={loading}
                />
              </div>

              <div className="form-group">
                <label htmlFor="phone">–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ *</label>
                <input
                  type="tel"
                  id="phone"
                  name="phone"
                  value={customerInfo.phone}
                  onChange={handleInputChange}
                  placeholder="+998 (90) 123-45-67"
                  disabled={loading}
                />
              </div>

              <div className="form-group">
                <label htmlFor="email">Email</label>
                <input
                  type="email"
                  id="email"
                  name="email"
                  value={customerInfo.email}
                  onChange={handleInputChange}
                  placeholder="example@email.com"
                  disabled={loading}
                />
              </div>

              <div className="form-group">
                <label htmlFor="notes">–î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –ø–æ–∂–µ–ª–∞–Ω–∏—è</label>
                <textarea
                  id="notes"
                  name="notes"
                  value={customerInfo.notes}
                  onChange={handleInputChange}
                  placeholder="–û–ø–∏—à–∏—Ç–µ –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞..."
                  rows="3"
                  disabled={loading}
                />
              </div>

              {error && <div className="error-message">{error}</div>}

              <div className="checkout-actions">
                <button 
                  className="back-btn"
                  onClick={() => setIsCheckout(false)}
                  disabled={loading}
                >
                  –ù–∞–∑–∞–¥ –≤ –∫–æ—Ä–∑–∏–Ω—É
                </button>
                <button 
                  className="create-order-btn"
                  onClick={handleCreateOrder}
                  disabled={loading}
                >
                  {loading ? '–°–æ–∑–¥–∞–Ω–∏–µ –∑–∞–∫–∞–∑–∞...' : '–°–æ–∑–¥–∞—Ç—å –∑–∞–∫–∞–∑'}
                </button>
              </div>
            </div>
          </div>
        )}
      </div>
    </div>
  );
};

export default Cart;
